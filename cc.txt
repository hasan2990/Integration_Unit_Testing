using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Moq;
using NUnit.Framework;
using Supplier.API.Controllers;
using Supplier.Application.Dtos;
using Supplier.Application.Interfaces;
using Supplier.Domain;
using Supplier.Domain.Entities;

namespace TestProject
{
    [TestFixture]
    public class SearchControllerTests
    {
        private Mock<ISearchService> _searchServiceMock;
        private SearchController _searchController;

        [SetUp]
        public void SetUp()
        {
            _searchServiceMock = new Mock<ISearchService>();
            _searchController = new SearchController(_searchServiceMock.Object);
        }

        [Test]
        public async Task Post_ShouldReturnStatusCode200_WhenSearchIsSuccessful()
        {
            // Arrange
            var searchRequestDto = new SearchRequestDto
            {
                UniqueTransID = "HASUSB30000006",
                Routes = new List<Route>
                {
                    new Route("DAC", "CXB", new DateTime(2024, 10, 2))
                },
                Adults = 2,
                Childs = 2,
                Infants = 1,
                CabinClass = "Economy",
                PreferredCarriers = new string[] { },
                ProhibitedCarriers = new string[] { },
                ChildrenAges = new int[] { 3, 7 },
                IsOpenCombination = false,
                PermittedBookingCodes = new string[] { }
            };
            var apiResult = new ApiResult<IEnumerable<SearchResponseDto>>
            {
                StatusCode = 200,
                Data = new List<SearchResponseDto>()
            };
            _searchServiceMock.Setup(s => s.Search(It.IsAny<SearchRequestDto>())).ReturnsAsync(apiResult);

            // Act
            var result = await _searchController.Post(searchRequestDto);

            // Assert
            var statusCodeResult = result as ObjectResult;
            Assert.IsNotNull(statusCodeResult);
            Assert.AreEqual(200, statusCodeResult.StatusCode);
            Assert.AreEqual(apiResult, statusCodeResult.Value);
        }
    }
}
